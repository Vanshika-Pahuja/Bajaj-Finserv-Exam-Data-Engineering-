# -*- coding: utf-8 -*-
"""Vanshika-2110991509 Data Engineering Code Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aSDnxMebRSGWiGxA4sVTKLqFmE6qpcoo
"""

from google.colab import drive

# Import the module
import json

# Python program to read
# json file

import json

# Opening JSON file
f = open('/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')

# returns JSON object as
# a dictionary
data = json.load(f)

# Iterating through the json
# list
#
# Closing file
f.close()

import pandas as pd

"""Question a :

Read the json file and select the columns mentioned below :
1. appointmentId
2. phoneNumber
3. firstName (from patientDetails)
4. lastName (from patientDetails)
5. gender (from patientDetails)*
6. birthDate (from patientDetails)**
7. medicines (from consultationData)
* Transform gender column data as mentioned below
'M' to male
'F' to female
null/Anything else to others
** Rename birthDate column as DOB
"""

import pandas as pd

# Read the JSON file
df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')

# Flatten the nested structure of patientDetails
df_patientDetails = pd.json_normalize(df['patientDetails'])


df_consultationData = pd.json_normalize(df['consultationData'])


df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)


df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
df_selected['gender'].fillna('Others', inplace=True)

# Rename the birthDate column as DOB
df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)

# Print the resulting DataFrame
print(df_selected)

"""Question 2

Create a derived column fullName from fisrtName and lastName separated by a " " (space).
* if firstName is 'abc' and lastName is 'xyz' then fullName must be 'abc xyz'
"""

import pandas as pd

# Read the JSON file
df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')


df_patientDetails = pd.json_normalize(df['patientDetails'])


df_consultationData = pd.json_normalize(df['consultationData'])


#df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)


#df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
#df_selected['gender'].fillna('Others', inplace=True)

#df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)

# Create the fullName column
df_selected['fullName'] = df_selected['firstName'] + ' ' + df_selected['lastName']

# Print the resulting DataFrame
print(df_selected)

"""Question c :

Add a column isValidMobile of boolean which contains the values true or false against each value from
phoneNumber column If a phone number is a valid Indian phone number. CREATE YOUR OWN LOGIC, DON’T
USE ANY EXTERNAL PYTHON LIBRARY TO FOR VALIDATION
true : indicates number is valid
false : indicates number is not valid
* Design a logic to check whether a phone number is valid or not
* General rules to check -
1. A valid number can have '+91' or '91' as prefix, a valid number must lie be between
6000000000-9999999999
eg : +919876787687 is valid
919877475896 is valid
+913454768688 is invalid
9876787687 is valid
3454768688 is invalid
57769666 is invalid
"""

import pandas as pd

#i have added the column which is names as isValidMobile and all data is achieved from it
df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')


df_patientDetails = pd.json_normalize(df['patientDetails'])

df_consultationData = pd.json_normalize(df['consultationData'])


df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)

df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
df_selected['gender'].fillna('Others', inplace=True)


df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)

df_selected['fullName'] = df_selected['firstName'] + ' ' + df_selected['lastName']


def is_valid_mobile(phone_number):
    if phone_number.startswith('+91') or phone_number.startswith('91'):
        digits = phone_number[-10:]  # Extract the last 10 digits
        if digits.isnumeric() and 6000000000 <= int(digits) <= 9999999999:
            return True
    return False

# Apply the function to create the isValidMobile column
df_selected['isValidMobile'] = df_selected['phoneNumber'].apply(is_valid_mobile)

# Print the resulting DataFrame
print(df_selected)

"""Question d :
Add a column phoneNumberHash which contains hash against only valid number and null in case of
invalid from phoneNumber column.
* Use SHA256 hashing algorithm to hash the mobile number
* Number +919876776576 and 9876776576 should have same hash

Question e:

Add a column Age which will contain the age in integer of the person, use DOB column to calulate the
age.
* if DOB is null then age should be null
"""

import pandas as pd
from datetime import datetime

# Read the JSON file
df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')


df_patientDetails = pd.json_normalize(df['patientDetails'])


df_consultationData = pd.json_normalize(df['consultationData'])


df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)

# Transform the gender column
df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
df_selected['gender'].fillna('Others', inplace=True)


df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)

# Create the fullName column
df_selected['fullName'] = df_selected['firstName'] + ' ' + df_selected['lastName']


df_selected['DOB'] = pd.to_datetime(df_selected['DOB'], utc=True)


current_date = pd.to_datetime('now', utc=True)
df_selected['Age'] = (current_date - df_selected['DOB']).dt.days // 365

# Print the resulting DataFrame
print(df_selected)

"""Question f :
Add below aggrigated columns against unique appointmentId---
Add a column noOfMedicines which will contain the number of medicines prescribed against each
appointmentId.
Add a column noOfActiveMedicines which will contain the number of active medicines prescribed
against each appointmentId.
Add a column noOfInActiveMedicines which will contain the number of inactive medicines prescribed
against each appointmentId.
* If the value of IsActive Column is true , that means medicine is active
* If the value of IsActive Column is false , that means medicine is inactive
"""

import pandas as pd
from datetime import datetime

# Read the JSON file
df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')


df_patientDetails = pd.json_normalize(df['patientDetails'])


df_consultationData = pd.json_normalize(df['consultationData'])

df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)

df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
df_selected['gender'].fillna('Others', inplace=True)


df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)

df_selected['fullName'] = df_selected['firstName'] + ' ' + df_selected['lastName']


df_selected['DOB'] = pd.to_datetime(df_selected['DOB'], utc=True)


current_date = pd.to_datetime('now', utc=True)
df_selected['Age'] = (current_date - df_selected['DOB']).dt.days // 365


df_selected['noOfMedicines'] = df_selected['medicines'].apply(lambda x: len(x) if isinstance(x, list) else 0)

df_selected['noOfActiveMedicines'] = df_selected['medicines'].apply(lambda x: sum(1 for med in x if isinstance(med, dict) and med.get('IsActive', False)) if isinstance(x, list) else 0)


df_selected['noOfInactiveMedicines'] = df_selected['medicines'].apply(lambda x: sum(1 for med in x if isinstance(med, dict) and not med.get('IsActive', False)) if isinstance(x, list) else 0)


df_aggregated = df_selected.groupby('appointmentId').agg({
    'noOfMedicines': 'sum',
    'noOfActiveMedicines': 'sum',
    'noOfInactiveMedicines': 'sum'
}).reset_index()

print(df_aggregated)

"""Question g :

Add a column medicineNames which should contain the name of all active medicines separated by a
character "," (comma) against each appointmentId.
"""

import pandas as pd
from datetime import datetime


#df = pd.read_json(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json')


df_patientDetails = pd.json_normalize(df['patientDetails'])


df_consultationData = pd.json_normalize(df['consultationData'])


df_selected = pd.concat([df[['appointmentId', 'phoneNumber']], df_patientDetails[['firstName', 'lastName', 'gender', 'birthDate']], df_consultationData['medicines']], axis=1)


df_selected['gender'] = df_selected['gender'].map({'M': 'Male', 'F': 'Female'})
df_selected['gender'].fillna('Others', inplace=True)


df_selected.rename(columns={'birthDate': 'DOB'}, inplace=True)


df_selected['fullName'] = df_selected['firstName'] + ' ' + df_selected['lastName']


df_selected['DOB'] = pd.to_datetime(df_selected['DOB'], utc=True)


current_date = pd.to_datetime('now', utc=True)
df_selected['Age'] = (current_date - df_selected['DOB']).dt.days // 365


df_selected['noOfMedicines'] = df_selected['medicines'].apply(lambda x: len(x) if isinstance(x, list) else 0)

df_selected['noOfActiveMedicines'] = df_selected['medicines'].apply(lambda x: sum(1 for med in x if isinstance(med, dict) and med.get('IsActive', False)) if isinstance(x, list) else 0)

df_selected['noOfInactiveMedicines'] = df_selected['medicines'].apply(lambda x: sum(1 for med in x if isinstance(med, dict) and not med.get('IsActive', False)) if isinstance(x, list) else 0)

df_selected['medicineNames'] = df_selected['medicines'].apply(lambda x: ', '.join(med['Name'] for med in x if isinstance(med, dict) and med.get('IsActive', False)) if isinstance(x, list) else '')


df_aggregated = df_selected.groupby('appointmentId').agg({
    'noOfMedicines': 'sum',
    'noOfActiveMedicines': 'sum',
    'noOfInactiveMedicines': 'sum',
    'medicineNames': ', '.join
}).reset_index()

print(df_aggregated)


columns_to_export = {'appointmentId', 'fullName', 'phoneNumber', 'isValidMobile',
                     'gender', 'DOB', 'Age', 'noOfMedicines', 'noOfActiveMedicines', 'noOfInactiveMedicines',
                     'medicineNames'}

#df_final = df_aggregated[columns_to_export]


df_aggregated.to_csv(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json', sep='~', index=False)

"""STEP 2 ⁉Your final dataframe should have these columns, Export this dataframe in a csv file with no index and use'~'
separator:-
1. appointmentId
2. fullName
3. phoneNumber
4. isValidMobile
5. phoneNumberHash
6. gender
7. DOB
8. Age
9. noOfMedicines
10. noOfActiveMedicines
11. noOfInActiveMedicines
12. MedicineNames


h.
1. Export the aggregated data in json file format
Keys:
1. Age
2. gender
3. validPhoneNumbers (no of valid mobile numbers)
4. appointments (no of appointments)
5. medicines (no of medicines prescribed)
6. activeMedicines (no of active medicines prescribed)
2. Plot a pie chart for number of appointments against gender

"""

import pandas as pd
import json
# Read the JSON file
with open(r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json') as json_file:
    data = json.load(json_file)

# Flatten the nested structure
df = pd.json_normalize(data)

# Select the desired columns
selected_columns = ['appointmentId', 'phoneNumber', 'patientDetails.firstName', 'patientDetails.lastName',
                    'patientDetails.gender', 'patientDetails.birthDate', 'consultationData.medicines']
df_selected = df[selected_columns]

# Transform the gender column
df_selected['patientDetails.gender'] = df_selected['patientDetails.gender'].map({'M': 'Male', 'F': 'Female'})

# Print the resulting DataFrame
print(df_selected)

import json
import pandas as pd
import matplotlib.pyplot as plt

json_file_path = r'/content/drive/MyDrive/Bajaj Exam /DataEngineeringQ2.json'
with open(json_file_path) as json_file:
    data = json.load(json_file)


df = pd.DataFrame(data)

plt.show()